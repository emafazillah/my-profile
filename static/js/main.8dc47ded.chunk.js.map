{"version":3,"sources":["img/octocat.png","components/TopMenu.jsx","components/Footer.jsx","components/MainContent.jsx","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","appBar","width","marginLeft","backgroundColor","menuButton","marginRight","spacing","title","flexGrow","TopMenu","classes","AppBar","position","className","Toolbar","Typography","variant","top","bottom","footer","fontSize","Footer","todaysdate","Date","getUTCFullYear","toolbar","mixins","palette","background","default","padding","avatar","content","fullWidth","bigAvatar","margin","height","MainContent","Grid","container","justify","alignItems","Avatar","src","octocat","paragraph","root","display","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,qC,wMCMrCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,OAAQ,CACNC,MAAM,aACNC,WAAY,IACZC,gBAAiB,WAEnBC,WAAY,CACVC,YAAaN,EAAMO,QAAQ,IAE7BC,MAAO,CACLC,SAAU,EACVN,WAAY,QAkBDO,MAdf,WACE,IAAMC,EAAUb,IAEhB,OACE,kBAACc,EAAA,EAAD,CAAQC,SAAS,QAAQC,UAAWH,EAAQV,QAC1C,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAWH,EAAQH,OAA5C,YCrBFV,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,OAAQ,CACNiB,IAAK,OACLC,OAAQ,EACRjB,MAAM,aACNC,WAAY,IACZC,gBAAiB,WAEnBC,WAAY,CACVC,YAAaN,EAAMO,QAAQ,IAE7BC,MAAO,CACLC,SAAU,EACVN,WAAY,IAEdiB,OAAQ,CACNjB,WAAY,GACZkB,SAAU,QAkBCC,MAdf,WACE,IAAMX,EAAUb,IACVyB,EAAa,IAAIC,KACvB,OACE,kBAACZ,EAAA,EAAD,CAAQC,SAAS,QAAQC,UAAWH,EAAQV,QAC1C,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAWH,EAAQS,QAA5C,kBACeG,EAAWE,qB,iCC3B5B3B,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrC0B,QAAS1B,EAAM2B,OAAOD,QACtBlB,MAAO,CACLC,SAAU,EACVL,gBAAiBJ,EAAM4B,QAAQC,WAAWC,QAC1CC,QAAS/B,EAAMO,QAAQ,GACvBJ,WAAY,IAEd6B,OAAQ,CACNvB,SAAU,EACVsB,QAAS/B,EAAMO,QAAQ,GACvBJ,WAAY,IAEd8B,QAAS,CACPxB,SAAU,EACVsB,QAAS/B,EAAMO,QAAQ,GACvBJ,WAAY,IAEd+B,UAAW,CACThC,MAAO,QAETiC,UAAW,CACTC,OAAQ,GACRlC,MAAO,IACPmC,OAAQ,SAmCGC,MA/Bf,WACE,IAAM3B,EAAUb,IAEhB,OACE,0BAAMgB,UAAWH,EAAQuB,WACvB,yBAAKpB,UAAWH,EAAQe,UACxB,yBAAKZ,UAAWH,EAAQH,OACtB,kBAACQ,EAAA,EAAD,CAAYC,QAAQ,MAApB,kBAEF,yBAAKH,UAAWH,EAAQqB,QACxB,kBAACO,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,OAAOC,WAAW,UACtC,kBAACC,EAAA,EAAD,CACEC,IAAKC,IACL/B,UAAWH,EAAQwB,cAIzB,yBAAKrB,UAAWH,EAAQsB,SACtB,kBAACjB,EAAA,EAAD,CAAY8B,WAAS,GAArB,kBACiB,6BADjB,2CAE0C,6BAF1C,iCAGgC,6BAHhC,0CAIyC,6BAJzC,oFAKmF,6BALnF,sCC/CFhD,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrC+C,KAAM,CACJC,QAAS,YAgBEC,MAZf,WACE,IAAMtC,EAAUb,IAEhB,OACE,yBAAKgB,UAAWH,EAAQoC,MACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCXSG,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8dc47ded.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/octocat.a2d142c5.png\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    width: `calc(100%)`,\r\n    marginLeft: 240,\r\n    backgroundColor: '#34495e',\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    marginLeft: 10,\r\n  },\r\n}));\r\n\r\nfunction TopMenu() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position='fixed' className={classes.appBar}>\r\n      <Toolbar>\r\n        <Typography variant='h6' className={classes.title}>\r\n          About\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default TopMenu;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Toolbar } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    top: 'auto',\r\n    bottom: 0,\r\n    width: `calc(100%)`,\r\n    marginLeft: 240,\r\n    backgroundColor: '#34495e',\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    marginLeft: 10,\r\n  },\r\n  footer: {\r\n    marginLeft: 20,\r\n    fontSize: 17,\r\n  },\r\n}));\r\n\r\nfunction Footer() {\r\n  const classes = useStyles();\r\n  const todaysdate = new Date();\r\n  return (\r\n    <AppBar position='fixed' className={classes.appBar}>\r\n      <Toolbar>\r\n        <Typography variant='h6' className={classes.footer}>\r\n          Â© Copyright {todaysdate.getUTCFullYear()}\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { Grid } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport octocat from '../img/octocat.png';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  toolbar: theme.mixins.toolbar,\r\n  title: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(2),\r\n    marginLeft: 10,\r\n  },\r\n  avatar: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(2),\r\n    marginLeft: 10,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(2),\r\n    marginLeft: 10,\r\n  },\r\n  fullWidth: {\r\n    width: '100%',\r\n  },\r\n  bigAvatar: {\r\n    margin: 30,\r\n    width: 100,\r\n    height: 100,\r\n  },\r\n}));\r\n\r\nfunction MainContent() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <main className={classes.fullWidth}>\r\n      <div className={classes.toolbar} />\r\n      <div className={classes.title}>\r\n        <Typography variant='h6'>Hi, everyone!</Typography>\r\n      </div>\r\n      <div className={classes.avatar}>\r\n      <Grid container justify='left' alignItems='center'>\r\n          <Avatar\r\n            src={octocat}\r\n            className={classes.bigAvatar}\r\n          />\r\n        </Grid>\r\n      </div>\r\n      <div className={classes.content}>\r\n        <Typography paragraph>\r\n          My name is Ema.<br/>\r\n          I am a software developer from Malaysia.<br/>\r\n          I code in Java on daily basis.<br/>\r\n          I also code in Javascript occasionally.<br/>\r\n          I used to code in C#, .NET, PHP, C and Assembly Language in my previous projects.<br/>\r\n          I am currently learning Python.\r\n        </Typography>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default MainContent;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TopMenu from '../components/TopMenu';\r\nimport Footer from '../components/Footer';\r\nimport MainContent from '../components/MainContent';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n}));\r\n\r\nfunction Home() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <TopMenu />\r\n      <MainContent />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './App.css';\r\nimport Home from './pages/Home';\r\n\r\nfunction App() {\r\n  return <Home />;\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}